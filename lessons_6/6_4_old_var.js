
// old var
// Область видимости переменных var ограничивается либо функцией, либо, если переменная глобальная, то скриптом.
// Такие переменные доступны за пределами блока.
"use strict"

if (true) {
  var test = true; // используем var вместо let
}
console.log(test); // true, переменная существует вне блока if

// if (true) {
//   let test_2 = true; // используем let
// }
// console.log(test_2); // Error: test is not defined

//

// Аналогично для циклов: var не может быть блочной или локальной внутри цикла:
for (var i = 0; i < 10; i++) {
  // ...
}
console.log(i); // 10, переменная i доступна вне цикла, т.к. является глобальной переменной

//

// Если блок кода находится внутри функции, то var становится локальной переменной в этой функции:
function sayHi() {
  if (true) {
    var phrase = "Привет";
  }

  console.log(phrase); // срабатывает и выводит "Привет"
}

sayHi();
// console.log(phrase); // Ошибка: phrase не определена (видна в консоли разработчика)

//

// Используя var, можно переобъявлять переменную сколько угодно раз. Повторные var игнорируются:
var user_2 = "Pete";
var user_2; // ничего не делает, переменная объявлена раньше
// ...нет ошибки
console.log(user_2); // Pete

//

// Если дополнительно присвоить значение, то переменная примет новое значение:
var user = "Pete";
var user = "John";
console.log(user); // John

//

// Объявления переменных var обрабатываются в начале выполнения функции (или запуска скрипта,
// если переменная является глобальной).

//
// блочная область видимости игнорируется):
function sayHi_2() {
  phrase = "Привет"; // (*)
  if (false) {
    var phrase;
  }
  console.log(phrase);
}
sayHi_2();
// В примере выше if (false) условие никогда не выполнится. Но это никаким образом не препятствует созданию
// переменной var phrase, которая находится внутри него, поскольку объявления var «всплывают» в начало функции.
// Т.е. в момент присвоения значения (*) переменная уже существует.

//

// Объявление переменной обрабатывается в начале выполнения функции («всплывает»), однако присвоение значения
// всегда происходит в той строке кода, где оно указано. Т.е. код выполняется по следующему сценарию:
function sayHi_3() {
  var phrase; // объявление переменной срабатывает вначале...
  console.log(phrase); // undefined
  phrase = "Привет"; // ...присвоение - в момент, когда исполнится данная строка кода.
}

sayHi_3();

//

// Существует 2 основных отличия var от let/const:
// 1) Переменные var не имеют блочной области видимости, они ограничены, как минимум, телом функции.
// 2) Объявления (инициализация) переменных varпроизводится в начале исполнения функции
// (или скрипта для глобальных переменных).
