// Взаимосвязанные объекты

function marry(man, woman) {
  woman.husband = man;
  man.wife = woman;

  return {
    father: man,
    mother: woman
  }
}

let family = marry({
  name: "John"
}, {
  name: "Ann"
});

// Теперь удалим две ссылки:
delete family.father;
delete family.mother.husband;
// Если мы удалим обе, то увидим, что у объекта John больше нет входящих ссылок:

console.log(family)

// Исходящие ссылки не имеют значения. Только входящие ссылки могут сделать объект достижимым. Объект John теперь
// недостижим и будет удалён из памяти со всеми своими данными, которые также стали недоступны.

// Внутренние алгоритмы

// Основной алгоритм сборки мусора называется «алгоритм пометок» (от англ. «mark-and-sweep»).
// Согласно этому алгоритму, сборщик мусора регулярно выполняет следующие шаги:
//
// Сборщик мусора «помечает» (запоминает) все корневые объекты.
// Затем он идёт по ним и «помечает» все ссылки из них.
// Затем он идёт по отмеченным объектам и отмечает их ссылки. Все посещённые объекты запоминаются, чтобы в будущем не посещать один и тот же объект дважды.
// …И так далее, пока не будут посещены все достижимые (из корней) ссылки.
// Все непомеченные объекты удаляются.
